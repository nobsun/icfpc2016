{-# LANGUAGE ParallelListComp #-}

module ProblemSubmit where

import Data.Word
import Data.Ratio
import System.FilePath ((</>), (<.>))

import Vertex
import Rotate
import Solution


timestamps :: [Word64]
timestamps =
  take 31 [1470495600, 1470499200 .. ]

probs :: [Int]
probs = [17, 18, 40, 42, 46]

vecs :: [Vec]
vecs =
  [ (-33784265329411 % 79136648009460,-27071488512943 % 65947206674550)
  , (-1424457704453857079 % 4718694146907206100,-281977905302190111 % 786449024484534350)
  , (-884255171498015303969 % 2778189753556917825420,-602258234059255426069 % 2315158127964098187850)
  , (-6977344535358128 % 26846579638145245,-962792102597230 % 5369315927629049)
  , (-791429172233296 % 2784704303890795,-70281763663222 % 556940860778159)
  , (-16281735951566584338739661 % 47862731084680007745171780,-2102480564737331911340512 % 16316840142504548094944925)
  , (-396944925314619953 % 1021863028370126700,82090376426704489 % 510931514185063350)
  , (-56600986290668312119 % 69754212715602989100,12885769504003819847 % 34877106357801494550)
  , (-5167311492873 % 5753597580100,5699005463383 % 17260792740300)
  , (-439275899647429736975992703959773451281 % 563310961268656638753417339927871593400,214566542644632525377896738421569789883 % 3098210286977611513143795369603293763700)
  , (-75605723639299504486735693 % 95468776733411069348962800,403470782169068129703047 % 7955731394450922445746900)
  , (-4070130442175016638460963 % 5471593976501514130909600,-13719886738900771832451 % 1367898494125378532727400)
  , (-98330470903779 % 132332744342300,-51610851685301 % 4366980563295900)
  , (-20716915605119507107080223831 % 27902682027539700504482432700,-54841364798021655234968933 % 4650447004589950084080405450)
  , (-3671883247906034629803463 % 5027020591235152137642300,-22627127012495196371621 % 837836765205858689607050)
  , (-31092825655526374494527 % 43339002170710185857580,-112858547417175102632083 % 3178193492518746962889200)
  , (-80752134872789929813 % 112966515936951327300,-879504652556605571 % 18827752656158554550)
  ]

p1 :: Pythagoras
p1 = Pythagoras (341880, 1471241, 1510441)

p2 :: Pythagoras
p2 = Pythagoras (286440, 1159801, 1194649)

p3 :: Pythagoras
p3 = Pythagoras (117600, 1437599, 1442401)

check :: Pythagoras -> Bool
check (Pythagoras (a, b, c)) = a * a + b * b == c * c

_checkPs :: [Bool]
_checkPs = map check [p1, p2, p3]


rotPats :: [(Rotate, PyTri, Pythagoras)]
rotPats =
  [ (rot, tri, p)
  | rot <- [CounterClock, Clock]
  , tri <- [TriLex, TriFlip]
  , p <- [p1, p2, p3]
  ]

submits :: [(Word64, (Int, Vec, (Rotate, PyTri, Pythagoras)))]
submits =
  [ (t, (prob, vec, rotp))
  | t     <-  timestamps
  | prob  <-  cycle probs
  | vec   <-  cycle vecs
  | rotp  <-  cycle rotPats
  ]

putSubmits :: IO ()
putSubmits =
  sequence_
  [ do putStrLn $ "writing: " ++ destFn
       moveRotSol prob vec rot tri py destFn
  | (t, (prob, vec, (rot, tri, py))) <- submits
  , let destFn = "publish-problem/submissions" </> show t <.> "dat"
  ]

submitScripts :: IO ()
submitScripts =
  writeFile "submit_problem_all.sh" $
  unlines $ "#! /bin/sh" : "set -x" : "" : concat
  [ [ "sleep 1.1"
    , "./submit_problem.sh " ++ show t ]
  | t <- timestamps
  ]
